DROP database DB_TFG;
create database DB_TFG;
USE DB_TFG;
create table TB_TARJETA(
cod_tarjeta smallint not null auto_increment,
UID_TARJETA char(8) not null,
CONSTRAINT PK_CODTARJETA_TARJETA PRIMARY KEY(COD_TARJETA),
CONSTRAINT UQ_UIDTRJETA_TARJETA UNIQUE(UID_TARJETA)
);
CREATE table TB_USUARIO(
COD_USUARIO SMALLINT NOT NULL AUTO_INCREMENT,
NOMBRE_USUARIO VARCHAR(50) NOT NULL,
APELLIDO1_USUARIO VARCHAR(50) NOT NULL,
APELLIDO2_USUARIO VARCHAR(50),
CORREO_ELECTRONICO VARCHAR(100) NOT NULL,
TIPO_USUARIO ENUM ('PROFESOR', 'ALUMNO'),
COD_TARJETA SMALLINT NOT NULL,
CONSTRAINT FK_CODTARJETA_USUSARIO FOREIGN KEY (COD_TARJETA) REFERENCES TB_TARJETA(COD_TARJETA) ON UPDATE CASCADE,
CONSTRAINT PK_CODUSUARIO_USUARIO PRIMARY KEY (COD_USUARIO),
CONSTRAINT UQ_CODTARJETA_USUARIO UNIQUE (COD_TARJETA),
CONSTRAINT UQ_MAIL_USUARIO UNIQUE (CORREO_ELECTRONICO)
);
CREATE TABLE TB_PROFESOR(
COD_PROFESOR SMALLINT NOT NULL,
DEPARTAMENTO VARCHAR (50) NOT NULL,
NIVEL_ENSEÑANZA_EDUCATIVA SET('INFANTIL', 'PRIMARIA','ESO','BACHILLERATO', 'FP_BASICA', 'GRADO_MEDIO', 'GRADO_SUPERIOR'),
CONSTRAINT FK_CODPROFESOR_PROFESOR FOREIGN KEY (COD_PROFESOR) REFERENCES TB_USUARIO(COD_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT PK_CODPROFESOR_PROFESOR PRIMARY KEY (COD_PROFESOR)
);
CREATE TABLE TB_CLASE(
COD_CLASE SMALLINT NOT NULL AUTO_INCREMENT,
NOMBRE_CLASE VARCHAR(50) NOT NULL,
PLANTA TINYINT NOT NULL,
EDIFICIO VARCHAR(50) NOT NULL,
CONSTRAINT PK_CODCLASE_CLASE PRIMARY KEY (COD_CLASE)
);
CREATE TABLE PROFESOR_ABRE_CLASE(
COD_CLASE SMALLINT NOT NULL,
COD_PROFESOR SMALLINT NOT NULL,
CONSTRAINT FK_CODPROFESOR_PROFESORABRECLASE FOREIGN KEY (COD_PROFESOR) REFERENCES TB_PROFESOR(COD_PROFESOR),
CONSTRAINT FK_CODCLASE_PROFESORABRECLASE FOREIGN KEY (COD_CLASE) REFERENCES TB_CLASE(COD_CLASE),
CONSTRAINT PK_CLASEPROFSOR_PROFESORABRECLASE PRIMARY KEY (COD_PROFESOR, COD_CLASE),
CONSTRAINT UQ_CLASEPROFSOR_PROFESORABRECLASE UNIQUE (COD_PROFESOR, COD_CLASE)
);
CREATE TABLE TB_CICLO(
COD_CICLO SMALLINT NOT NULL AUTO_INCREMENT,
NOMBRE_CICLO VARCHAR (50) NOT NULL,
CONSTRAINT PK_CODCICLO_CICLO PRIMARY KEY (COD_CICLO) 
);
CREATE TABLE TB_MODULO(
COD_MODULO SMALLINT NOT NULL AUTO_INCREMENT,
NOMBRE_MODULO VARCHAR(50) NOT NULL,
HORAS_TOTALES SMALLINT NOT NULL,
CURSO TINYINT NOT NULL,
COD_CICLO SMALLINT NOT NULL,
COD_CLASE SMALLINT NOT NULL,
COD_PROFESOR SMALLINT NOT NULL,
CONSTRAINT FK_CODPROFESOR_MODULO FOREIGN KEY (COD_PROFESOR) REFERENCES TB_PROFESOR(COD_PROFESOR),
CONSTRAINT FK_CODCLASE_MODULO FOREIGN KEY (COD_CLASE) REFERENCES TB_CLASE(COD_CLASE),
CONSTRAINT FK_CODCICLO_MODULO FOREIGN KEY (COD_CICLO) REFERENCES TB_CICLO(COD_CICLO),
CONSTRAINT PK_CICLOMODULO_MODULO PRIMARY KEY(COD_MODULO,COD_CICLO),
CONSTRAINT UQ_CICLOMODULO_MODULO UNIQUE(COD_MODULO,COD_CICLO)
);
CREATE TABLE TB_ALUMNO_MATRICULA_MODULO(
COD_ALUMNO SMALLINT NOT NULL,
COD_MODULO SMALLINT NOT NULL,
COD_CICLO SMALLINT NOT NULL,
CONSTRAINT FK_CODALUMNO_ALUMNOMATRICULAMODULO FOREIGN KEY (COD_ALUMNO) REFERENCES TB_USUARIO(COD_USUARIO),
CONSTRAINT FK_CODMODULO_ALUMNOMATRICULAMODULO FOREIGN KEY (COD_MODULO) REFERENCES TB_MODULO(COD_MODULO),
CONSTRAINT FK_CODCICLO_ALUMNOMATRICULAMODULO FOREIGN KEY (COD_CICLO) REFERENCES TB_CICLO(COD_CICLO),
CONSTRAINT PK_ALUMNOMODULOCICLO_ALUMNOMATRICULAMODULO PRIMARY KEY (COD_ALUMNO, COD_MODULO, COD_CICLO),
CONSTRAINT UQ_ALUMNOMODULOCICLO_ALUMNOMATRICULAMODULO UNIQUE (COD_ALUMNO, COD_MODULO, COD_CICLO)
);
CREATE TABLE TB_ALUMNO_ASISTE_MODULO_CLASE(
COD_ALUMNO SMALLINT NOT NULL,
COD_MODULO SMALLINT NOT NULL,
COD_CICLO SMALLINT NOT NULL,
COD_CLASE SMALLINT NOT NULL,
FALTAS SMALLINT NOT NULL,
CONSTRAINT FK_CODALUMNO_ALUMNOASISTEMODULOCLASE FOREIGN KEY (COD_ALUMNO) REFERENCES TB_ALUMNO_MATRICULA_MODULO(COD_ALUMNO),
CONSTRAINT FK_CODMODULO_ALUMNOASISTEMODULOCLASE FOREIGN KEY (COD_MODULO) REFERENCES TB_ALUMNO_MATRICULA_MODULO(COD_MODULO),
CONSTRAINT FK_CODCICLO_ALUMNOASISTEMODULOCLASE FOREIGN KEY (COD_CICLO) REFERENCES TB_ALUMNO_MATRICULA_MODULO(COD_CICLO),
CONSTRAINT FK_CODCLASE_ALUMNOASISTEMODULOCLASE FOREIGN KEY (COD_CLASE) REFERENCES TB_CLASE(COD_CLASE),
CONSTRAINT PK_ALUMNOMODULOCICLO_ALUMNOASISTEMODULOCLASE PRIMARY KEY (COD_ALUMNO, COD_MODULO, COD_CICLO),
CONSTRAINT UQ_ALUMNOMODULOCICLO_ALUMNOASISTEMODULOCLASE UNIQUE (COD_ALUMNO, COD_MODULO, COD_CICLO)
);
CREATE TABLE TB_HORARIO(
COD_HORARIO SMALLINT NOT NULL AUTO_INCREMENT,
DIA_SEMANA ENUM('LUNES','MARTES','MIERCOLES','JUEVES','VIERNES'),
HORA_INICIO TIME NOT NULL,
ID_DIA TINYINT NOT NULL,
CONSTRAINT PK_CODHORARIO_HORARIO PRIMARY KEY(COD_HORARIO),
CONSTRAINT UQ_HORARIO UNIQUE(DIA_SEMANA,HORA_INICIO)
);
CREATE TABLE TB_MODULO_SE_IMPARTE_HORARIO(
COD_HORARIO SMALLINT NOT NULL,
COD_MODULO SMALLINT NOT NULL,
COD_CICLO SMALLINT NOT NULL,
CONSTRAINT FK_CODHORARIO_MODULOIMPARTEHORARIO FOREIGN KEY (COD_HORARIO) REFERENCES TB_HORARIO(COD_HORARIO),
CONSTRAINT FK_CODMODULO_MODULOIMPARTEHORARIO FOREIGN KEY (COD_MODULO) REFERENCES TB_MODULO(COD_MODULO),
CONSTRAINT FK_CODCICLO_MODULOIMPARTEHORARIO FOREIGN KEY (COD_CICLO) REFERENCES TB_MODULO(COD_CICLO),
CONSTRAINT PK_HORARIOMODULOCICLO_MODULOIMPARTEHORARIO PRIMARY KEY (COD_HORARIO, COD_MODULO, COD_CICLO),
CONSTRAINT UQ_HORARIOMODULOCICLO_MODULOIMPARTEHORARIO UNIQUE (COD_HORARIO, COD_MODULO, COD_CICLO)
);


/*CREACIÓN DE TRIGGERS*/


/*TRIGGER PARA LA COMPROBACIÓN DEL CÓDIGO ALUMNO*/


DELIMITER //
CREATE TRIGGER TG_COMPROBACION_CODALUMNO
/*SE REALIZARÁ TRAS LA INSERCIÓN EN LA TABLA PARA PODER COMPARAR EL VALOR INSERTADO CON EL VALOR EN LA TABLA USUARIO*/
AFTER INSERT ON TB_ALUMNO_MATRICULA_MODULO FOR EACH ROW
BEGIN
	DECLARE MSG VARCHAR (255); /*VARIABLE QUE GUARDARÁ EL MENSAJE QUE SE MOSTRARÁ AL USUARIO EN CASO DE ERROR*/
    	DECLARE TIPO VARCHAR (9); /*VARIABLE QUE GUARDARÁ EL TIPO DE USUARIO QUE QUEREMOS COMPARAR*/
	DECLARE TIPO_USUARIO VARCHAR (9); /*VARIABLE QUE GUARDARÁ EL TIPO DE USUARIO OBTENIDO DE LA CONSULTA*/
    	SET @CODIGO_ALUMNO=NEW.COD_ALUMNO; /*GUARDAMOS EL CÓDIGO DE ALUMNO INSERTADO EN UNA VARIABLE PARA UTILIZARLO EN LA CONSULTA*/
    SET TIPO='ALUMNO'; /*TIPO DE USUARIO QUE QUEREMOS COMPARAR*/


/*ESTA CONSULTA GUARDA EN LA VARIABLE CREADA TIPO_USUARIO EL TIPO DE USUARIO QUE TIENE EL USUARIO CON EL CÓDIGO DE USUARIO INSERTADO EN LA TABLA TB_ALUMNO_MATRICULA_MODULO PARA PODER SABER SI ES ALUMNO O NO*/
    SELECT U.TIPO_USUARIO INTO TIPO_USUARIO
    FROM TB_USUARIO AS U
    INNER JOIN TB_ALUMNO_MATRICULA_MODULO AS A ON U.COD_USUARIO=A.COD_ALUMNO
    WHERE U.COD_USUARIO=@CODIGO_ALUMNO limit 1;


/*EN ESTA CONDICIÓN IF SE ANALIZA SI EL TIPO DE USUARIO OBTENIDO ANTERIORMENTE COINCIDE CON EL TIPO DE USUARIO GUARDADO PREVIAMENTE (ALUMNO), SI COINCIDE SE INSERTARÁ, DE LO CONTRARIO MOSTRARÁ UN MENSAJE DE ERROR*/
    IF (TIPO NOT LIKE TIPO_USUARIO) THEN
		SET MSG=CONCAT('EL USUARIO INTRODUCIDO CON CODIGO ', @CODIGO_ALUMNO ,' NO ES UN ALUMNO');
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG;
	END IF;


END //
DELIMITER ;


/*TRIGGER PARA LA COMPROBACIÓN DEL CÓDIGO PROFESOR*/


DELIMITER //
CREATE TRIGGER TG_COMPROBACION_CODPROFESOR
/*SE REALIZARÁ TRAS LA INSERCIÓN EN LA TABLA PARA PODER COMPARAR EL VALOR INSERTADO CON EL VALOR EN LA TABLA USUARIO*/
AFTER INSERT ON TB_PROFESOR FOR EACH ROW
BEGIN
	DECLARE MSG VARCHAR (255); /*VARIABLE QUE GUARDARÁ EL MENSAJE QUE SE MOSTRARÁ AL USUARIO EN CASO DE ERROR*/
    DECLARE TIPO VARCHAR (9); /*VARIABLE QUE GUARDARÁ EL TIPO DE USUARIO QUE QUEREMOS COMPARAR*/
	DECLARE TIPO_USUARIO VARCHAR (9); /*VARIABLE QUE GUARDARÁ EL TIPO DE USUARIO OBTENIDO DE LA CONSULTA*/
    	SET @CODIGO_PROFESOR=NEW.COD_PROFESOR; /*GUARDAMOS EL CÓDIGO DE PROFESOR INSERTADO EN UNA VARIABLE PARA UTILIZARLO EN LA CONSULTA*/
   	SET TIPO='PROFESOR'; /*TIPO DE USUARIO QUE QUEREMOS COMPARAR*/


/*ESTA CONSULTA GUARDA EN LA VARIABLE CREADA TIPO_USUARIO EL TIPO DE USUARIO QUE TIENE EL USUARIO CON EL CÓDIGO DE USUARIO INSERTADO EN LA TABLA TB_PROFESOR PARA PODER SABER SI ES PROFESOR O NO*/
    	SELECT U.TIPO_USUARIO INTO TIPO_USUARIO
    	FROM TB_USUARIO AS U
    	INNER JOIN TB_PROFESOR AS P ON U.COD_USUARIO=P.COD_PROFESOR
    	WHERE U.COD_USUARIO=@CODIGO_PROFESOR;


/*EN ESTA CONDICIÓN IF SE ANALIZA SI EL TIPO DE USUARIO OBTENIDO ANTERIORMENTE COINCIDE CON EL TIPO DE USUARIO GUARDADO PREVIAMENTE (ALUMNO), SI COINCIDE SE INSERTARÁ, DE LO CONTRARIO MOSTRARÁ UN MENSAJE DE ERROR*/
    	IF (TIPO NOT LIKE TIPO_USUARIO) THEN
		SET MSG=CONCAT('EL USUARIO INTRODUCIDO CON CODIGO ', @CODIGO_PROFESOR ,' NO ES UN PROFESOR');
        	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG;
	END IF;


END //
DELIMITER ;


/*TRIGGER PARA AUTOCOMPLETAR LA TABLA PROFESOR_ABRE_CLASE*/


DELIMITER //
CREATE TRIGGER TG_PROFE_ABRE_CLASE
/*SE RALIZA ANTES DE LA INSERCIÓN, YA QUE SI SE HICIESE DESPUÉS SIEMPRE HABRÍA UN REGISTRO QUE COINCIDIESE EN LA CONSULTA POR LO QUE NO FUNCIONARÍA. Y ES SOBRE LA TABLA MÓDULO PORQUE ES LA QUE NOS PROPORCIONARÁ LOS DATOS A INSERTAR*/
BEFORE INSERT ON TB_MODULO FOR EACH ROW
BEGIN
SET @COD_PROFESOR_INSERTADO=NEW.COD_PROFESOR; /*GUARDAMOS EL CÓDIGO DE PROFESOR INSERTADO EN UNA VARIABLE PARA UTILIZARLO EN LA CONSULTA*/
SET @COD_CLASE_INSERTADO=NEW.COD_CLASE; /*GUARDAMOS EL CÓDIGO DE CLASE INSERTADO EN UNA VARIABLE PARA UTILIZARLO EN LA CONSULTA*/
SET @CONDICION1= (SELECT DISTINCT COD_CLASE FROM TB_MODULO WHERE COD_CLASE = @COD_CLASE_INSERTADO AND COD_PROFESOR = @COD_PROFESOR_INSERTADO); /*ESTA VARIABLE GUARDA EL RESULTADO DE UNA CONSULTA QUE ANALIZA SI YA HAY ALGUNA COMBINACIÓN DE CÓDIGO PROFESOR Y CLASE INSERTADA, ESTO SE HACE PORQUE SI YA HAY UNA NO SE DEBERÍA VOLVER A INSERTAR EN PROFESOR_ABRE_CLASE*/
/*ESTA CONDICIÓN IF COMPRUEBA SI EL RESULTADO DE LA CONSULTA ANTERIOR ESTÁ VACÍO, SI ES ASÍ INSERTARÁ LOS DATOS DE CÓDIGO PROFESOR Y CLASE EN LA TABLA PROFESOR_ABRE_CLASE*/
IF (@CONDICION1 IS NULL) THEN
INSERT INTO PROFESOR_ABRE_CLASE (COD_CLASE, COD_PROFESOR) VALUES (@COD_CLASE_INSERTADO, @COD_PROFESOR_INSERTADO);
END IF;
END //
DELIMITER ;


/*TRIGGER PARA AUTOCOMPLETAR LA TABLA TB_ALUMNO_MATRICULA_MODULO*/


DELIMITER //
CREATE TRIGGER TG_ALUMNO_ASISTE_MODULO_CLASE
/*SE REALIZA TRAS LA INSERCIÓN YA QUE NINGUNA COMPROBACIÓN ES NECESARIA Y LA INSERCIÓN SERÁ INSTANTÁNEA A RAÍZ DE LA TABLA*/
after INSERT ON TB_ALUMNO_MATRICULA_MODULO FOR EACH ROW
BEGIN


/*AQUÍ SE REALIZA LA INSERCIÓN UTILIZANDO LOS CAMPOS DE OTRA TABLA(TB_MODULO), CON LOS NUEVOS DATOS INSERTADOS EN LA TABLA EN LA QUE SE APLICA EL TRIGGER*/
INSERT INTO TB_ALUMNO_ASISTE_MODULO_CLASE(COD_ALUMNO,COD_MODULO,COD_CICLO,COD_CLASE,FALTAS)
SELECT NEW.COD_ALUMNO, NEW.COD_MODULO,NEW.COD_CICLO,M.COD_CLASE,0
FROM tb_modulo AS M
WHERE M.COD_MODULO=NEW.COD_MODULO AND M.COD_CICLO=NEW.COD_CICLO;
END //
DELIMITER ;

/*VISTA PARA CONSULTAS PAGINA WEB*/
/*SE REALIZAN MÚLTIPLES INNER JOIN PARA LA RELACIÓN DE TODAS LAS TABLAS NECESARIAS Y ASÍ LLEGAR AL RESULTADO DESEADO. TODO EL PROCEDIMIENTO SE REALIZA PARA SABER CUAL ES EL HORARIO DE LOS DIFERENTES MODULOS*/
CREATE VIEW VW_VISTA_HORARIO_COMPLETO_2asir AS
select U.NOMBRE_USUARIO, U.APELLIDO1_USUARIO,  U.APELLIDO2_USUARIO, T.UID_TARJETA, M.NOMBRE_MODULO, H.DIA_SEMANA, H.HORA_INICIO, M.COD_CICLO, M.CURSO, H.ID_DIA  from tb_tarjeta as t
inner join tb_usuario as u on u.cod_tarjeta=t.cod_tarjeta
inner join tb_profesor as p on p.cod_profesor=u.cod_usuario
inner join tb_modulo as m on m.cod_profesor=p.cod_profesor
inner join TB_MODULO_SE_IMPARTE_HORARIO  as mh on mh.cod_modulo=m.cod_modulo
inner join tb_horario as h on h.cod_horario=mh.cod_horario
ORDER BY H.DIA_SEMANA;
